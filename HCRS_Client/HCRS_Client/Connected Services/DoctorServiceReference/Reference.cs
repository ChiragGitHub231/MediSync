//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HCRS_Client.DoctorServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Doctor", Namespace="http://schemas.datacontract.org/2004/07/HCRS_Service")]
    [System.SerializableAttribute()]
    public partial class Doctor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Contact_NoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExperienceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecializationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contact_No {
            get {
                return this.Contact_NoField;
            }
            set {
                if ((object.ReferenceEquals(this.Contact_NoField, value) != true)) {
                    this.Contact_NoField = value;
                    this.RaisePropertyChanged("Contact_No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Experience {
            get {
                return this.ExperienceField;
            }
            set {
                if ((this.ExperienceField.Equals(value) != true)) {
                    this.ExperienceField = value;
                    this.RaisePropertyChanged("Experience");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderField, value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Specialization {
            get {
                return this.SpecializationField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecializationField, value) != true)) {
                    this.SpecializationField = value;
                    this.RaisePropertyChanged("Specialization");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DoctorData", Namespace="http://schemas.datacontract.org/2004/07/HCRS_Service")]
    [System.SerializableAttribute()]
    public partial class DoctorData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Data.DataTable doctorTableField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Data.DataTable doctorTable {
            get {
                return this.doctorTableField;
            }
            set {
                if ((object.ReferenceEquals(this.doctorTableField, value) != true)) {
                    this.doctorTableField = value;
                    this.RaisePropertyChanged("doctorTable");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DoctorServiceReference.IDoctorService")]
    public interface IDoctorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/Insert", ReplyAction="http://tempuri.org/IDoctorService/InsertResponse")]
        bool Insert(HCRS_Client.DoctorServiceReference.Doctor user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/Insert", ReplyAction="http://tempuri.org/IDoctorService/InsertResponse")]
        System.Threading.Tasks.Task<bool> InsertAsync(HCRS_Client.DoctorServiceReference.Doctor user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetDoctorData", ReplyAction="http://tempuri.org/IDoctorService/GetDoctorDataResponse")]
        HCRS_Client.DoctorServiceReference.DoctorData GetDoctorData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetDoctorData", ReplyAction="http://tempuri.org/IDoctorService/GetDoctorDataResponse")]
        System.Threading.Tasks.Task<HCRS_Client.DoctorServiceReference.DoctorData> GetDoctorDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetDoctorById", ReplyAction="http://tempuri.org/IDoctorService/GetDoctorByIdResponse")]
        HCRS_Client.DoctorServiceReference.Doctor GetDoctorById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetDoctorById", ReplyAction="http://tempuri.org/IDoctorService/GetDoctorByIdResponse")]
        System.Threading.Tasks.Task<HCRS_Client.DoctorServiceReference.Doctor> GetDoctorByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/Update", ReplyAction="http://tempuri.org/IDoctorService/UpdateResponse")]
        bool Update(int id, HCRS_Client.DoctorServiceReference.Doctor user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/Update", ReplyAction="http://tempuri.org/IDoctorService/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(int id, HCRS_Client.DoctorServiceReference.Doctor user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/Delete", ReplyAction="http://tempuri.org/IDoctorService/DeleteResponse")]
        bool Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/Delete", ReplyAction="http://tempuri.org/IDoctorService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetDoctorCount", ReplyAction="http://tempuri.org/IDoctorService/GetDoctorCountResponse")]
        int GetDoctorCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetDoctorCount", ReplyAction="http://tempuri.org/IDoctorService/GetDoctorCountResponse")]
        System.Threading.Tasks.Task<int> GetDoctorCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/SearchDoctorByName", ReplyAction="http://tempuri.org/IDoctorService/SearchDoctorByNameResponse")]
        HCRS_Client.DoctorServiceReference.DoctorData SearchDoctorByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/SearchDoctorByName", ReplyAction="http://tempuri.org/IDoctorService/SearchDoctorByNameResponse")]
        System.Threading.Tasks.Task<HCRS_Client.DoctorServiceReference.DoctorData> SearchDoctorByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/SearchDoctorBySpecialization", ReplyAction="http://tempuri.org/IDoctorService/SearchDoctorBySpecializationResponse")]
        HCRS_Client.DoctorServiceReference.DoctorData SearchDoctorBySpecialization(string specialization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/SearchDoctorBySpecialization", ReplyAction="http://tempuri.org/IDoctorService/SearchDoctorBySpecializationResponse")]
        System.Threading.Tasks.Task<HCRS_Client.DoctorServiceReference.DoctorData> SearchDoctorBySpecializationAsync(string specialization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/SearchDoctorByExperience", ReplyAction="http://tempuri.org/IDoctorService/SearchDoctorByExperienceResponse")]
        HCRS_Client.DoctorServiceReference.DoctorData SearchDoctorByExperience(string experience);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/SearchDoctorByExperience", ReplyAction="http://tempuri.org/IDoctorService/SearchDoctorByExperienceResponse")]
        System.Threading.Tasks.Task<HCRS_Client.DoctorServiceReference.DoctorData> SearchDoctorByExperienceAsync(string experience);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDoctorServiceChannel : HCRS_Client.DoctorServiceReference.IDoctorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoctorServiceClient : System.ServiceModel.ClientBase<HCRS_Client.DoctorServiceReference.IDoctorService>, HCRS_Client.DoctorServiceReference.IDoctorService {
        
        public DoctorServiceClient() {
        }
        
        public DoctorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DoctorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DoctorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DoctorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Insert(HCRS_Client.DoctorServiceReference.Doctor user) {
            return base.Channel.Insert(user);
        }
        
        public System.Threading.Tasks.Task<bool> InsertAsync(HCRS_Client.DoctorServiceReference.Doctor user) {
            return base.Channel.InsertAsync(user);
        }
        
        public HCRS_Client.DoctorServiceReference.DoctorData GetDoctorData() {
            return base.Channel.GetDoctorData();
        }
        
        public System.Threading.Tasks.Task<HCRS_Client.DoctorServiceReference.DoctorData> GetDoctorDataAsync() {
            return base.Channel.GetDoctorDataAsync();
        }
        
        public HCRS_Client.DoctorServiceReference.Doctor GetDoctorById(int id) {
            return base.Channel.GetDoctorById(id);
        }
        
        public System.Threading.Tasks.Task<HCRS_Client.DoctorServiceReference.Doctor> GetDoctorByIdAsync(int id) {
            return base.Channel.GetDoctorByIdAsync(id);
        }
        
        public bool Update(int id, HCRS_Client.DoctorServiceReference.Doctor user) {
            return base.Channel.Update(id, user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(int id, HCRS_Client.DoctorServiceReference.Doctor user) {
            return base.Channel.UpdateAsync(id, user);
        }
        
        public bool Delete(int id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public int GetDoctorCount() {
            return base.Channel.GetDoctorCount();
        }
        
        public System.Threading.Tasks.Task<int> GetDoctorCountAsync() {
            return base.Channel.GetDoctorCountAsync();
        }
        
        public HCRS_Client.DoctorServiceReference.DoctorData SearchDoctorByName(string name) {
            return base.Channel.SearchDoctorByName(name);
        }
        
        public System.Threading.Tasks.Task<HCRS_Client.DoctorServiceReference.DoctorData> SearchDoctorByNameAsync(string name) {
            return base.Channel.SearchDoctorByNameAsync(name);
        }
        
        public HCRS_Client.DoctorServiceReference.DoctorData SearchDoctorBySpecialization(string specialization) {
            return base.Channel.SearchDoctorBySpecialization(specialization);
        }
        
        public System.Threading.Tasks.Task<HCRS_Client.DoctorServiceReference.DoctorData> SearchDoctorBySpecializationAsync(string specialization) {
            return base.Channel.SearchDoctorBySpecializationAsync(specialization);
        }
        
        public HCRS_Client.DoctorServiceReference.DoctorData SearchDoctorByExperience(string experience) {
            return base.Channel.SearchDoctorByExperience(experience);
        }
        
        public System.Threading.Tasks.Task<HCRS_Client.DoctorServiceReference.DoctorData> SearchDoctorByExperienceAsync(string experience) {
            return base.Channel.SearchDoctorByExperienceAsync(experience);
        }
    }
}
