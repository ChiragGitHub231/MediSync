//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HCRS_Client.AppointmentServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Appointment", Namespace="http://schemas.datacontract.org/2004/07/HCRS_Service")]
    [System.SerializableAttribute()]
    public partial class Appointment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DoctorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DoctorId {
            get {
                return this.DoctorIdField;
            }
            set {
                if ((this.DoctorIdField.Equals(value) != true)) {
                    this.DoctorIdField = value;
                    this.RaisePropertyChanged("DoctorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientId {
            get {
                return this.PatientIdField;
            }
            set {
                if ((this.PatientIdField.Equals(value) != true)) {
                    this.PatientIdField = value;
                    this.RaisePropertyChanged("PatientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Time {
            get {
                return this.TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeField, value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Appointment_Patient", Namespace="http://schemas.datacontract.org/2004/07/HCRS_Service")]
    [System.SerializableAttribute()]
    public partial class Appointment_Patient : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientId {
            get {
                return this.PatientIdField;
            }
            set {
                if ((this.PatientIdField.Equals(value) != true)) {
                    this.PatientIdField = value;
                    this.RaisePropertyChanged("PatientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientName {
            get {
                return this.PatientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientNameField, value) != true)) {
                    this.PatientNameField = value;
                    this.RaisePropertyChanged("PatientName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Appointment_Doctor", Namespace="http://schemas.datacontract.org/2004/07/HCRS_Service")]
    [System.SerializableAttribute()]
    public partial class Appointment_Doctor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DoctorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DoctorNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DoctorId {
            get {
                return this.DoctorIdField;
            }
            set {
                if ((this.DoctorIdField.Equals(value) != true)) {
                    this.DoctorIdField = value;
                    this.RaisePropertyChanged("DoctorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DoctorName {
            get {
                return this.DoctorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DoctorNameField, value) != true)) {
                    this.DoctorNameField = value;
                    this.RaisePropertyChanged("DoctorName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppointmentData", Namespace="http://schemas.datacontract.org/2004/07/HCRS_Service")]
    [System.SerializableAttribute()]
    public partial class AppointmentData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Data.DataTable appointmentTableField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Data.DataTable appointmentTable {
            get {
                return this.appointmentTableField;
            }
            set {
                if ((object.ReferenceEquals(this.appointmentTableField, value) != true)) {
                    this.appointmentTableField = value;
                    this.RaisePropertyChanged("appointmentTable");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppointmentInfo", Namespace="http://schemas.datacontract.org/2004/07/HCRS_Service")]
    [System.SerializableAttribute()]
    public partial class AppointmentInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DoctorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DoctorName {
            get {
                return this.DoctorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DoctorNameField, value) != true)) {
                    this.DoctorNameField = value;
                    this.RaisePropertyChanged("DoctorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientName {
            get {
                return this.PatientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientNameField, value) != true)) {
                    this.PatientNameField = value;
                    this.RaisePropertyChanged("PatientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Time {
            get {
                return this.TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeField, value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AppointmentServiceReference.IAppointmentService")]
    public interface IAppointmentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/Insert", ReplyAction="http://tempuri.org/IAppointmentService/InsertResponse")]
        bool Insert(HCRS_Client.AppointmentServiceReference.Appointment appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/Insert", ReplyAction="http://tempuri.org/IAppointmentService/InsertResponse")]
        System.Threading.Tasks.Task<bool> InsertAsync(HCRS_Client.AppointmentServiceReference.Appointment appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetAllPatients", ReplyAction="http://tempuri.org/IAppointmentService/GetAllPatientsResponse")]
        HCRS_Client.AppointmentServiceReference.Appointment_Patient[] GetAllPatients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetAllPatients", ReplyAction="http://tempuri.org/IAppointmentService/GetAllPatientsResponse")]
        System.Threading.Tasks.Task<HCRS_Client.AppointmentServiceReference.Appointment_Patient[]> GetAllPatientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetAllDoctors", ReplyAction="http://tempuri.org/IAppointmentService/GetAllDoctorsResponse")]
        HCRS_Client.AppointmentServiceReference.Appointment_Doctor[] GetAllDoctors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetAllDoctors", ReplyAction="http://tempuri.org/IAppointmentService/GetAllDoctorsResponse")]
        System.Threading.Tasks.Task<HCRS_Client.AppointmentServiceReference.Appointment_Doctor[]> GetAllDoctorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetAppointmentData", ReplyAction="http://tempuri.org/IAppointmentService/GetAppointmentDataResponse")]
        HCRS_Client.AppointmentServiceReference.AppointmentData GetAppointmentData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetAppointmentData", ReplyAction="http://tempuri.org/IAppointmentService/GetAppointmentDataResponse")]
        System.Threading.Tasks.Task<HCRS_Client.AppointmentServiceReference.AppointmentData> GetAppointmentDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetAppointmentById", ReplyAction="http://tempuri.org/IAppointmentService/GetAppointmentByIdResponse")]
        HCRS_Client.AppointmentServiceReference.AppointmentInfo GetAppointmentById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetAppointmentById", ReplyAction="http://tempuri.org/IAppointmentService/GetAppointmentByIdResponse")]
        System.Threading.Tasks.Task<HCRS_Client.AppointmentServiceReference.AppointmentInfo> GetAppointmentByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/Update", ReplyAction="http://tempuri.org/IAppointmentService/UpdateResponse")]
        bool Update(int id, HCRS_Client.AppointmentServiceReference.Appointment appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/Update", ReplyAction="http://tempuri.org/IAppointmentService/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(int id, HCRS_Client.AppointmentServiceReference.Appointment appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/Delete", ReplyAction="http://tempuri.org/IAppointmentService/DeleteResponse")]
        bool Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/Delete", ReplyAction="http://tempuri.org/IAppointmentService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetAppointmentCount", ReplyAction="http://tempuri.org/IAppointmentService/GetAppointmentCountResponse")]
        int GetAppointmentCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetAppointmentCount", ReplyAction="http://tempuri.org/IAppointmentService/GetAppointmentCountResponse")]
        System.Threading.Tasks.Task<int> GetAppointmentCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SearchAppointmentByPatientName", ReplyAction="http://tempuri.org/IAppointmentService/SearchAppointmentByPatientNameResponse")]
        HCRS_Client.AppointmentServiceReference.AppointmentData SearchAppointmentByPatientName(string patientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SearchAppointmentByPatientName", ReplyAction="http://tempuri.org/IAppointmentService/SearchAppointmentByPatientNameResponse")]
        System.Threading.Tasks.Task<HCRS_Client.AppointmentServiceReference.AppointmentData> SearchAppointmentByPatientNameAsync(string patientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SearchAppointmentByDoctorName", ReplyAction="http://tempuri.org/IAppointmentService/SearchAppointmentByDoctorNameResponse")]
        HCRS_Client.AppointmentServiceReference.AppointmentData SearchAppointmentByDoctorName(string doctorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SearchAppointmentByDoctorName", ReplyAction="http://tempuri.org/IAppointmentService/SearchAppointmentByDoctorNameResponse")]
        System.Threading.Tasks.Task<HCRS_Client.AppointmentServiceReference.AppointmentData> SearchAppointmentByDoctorNameAsync(string doctorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SearchAppointmentByDate", ReplyAction="http://tempuri.org/IAppointmentService/SearchAppointmentByDateResponse")]
        HCRS_Client.AppointmentServiceReference.AppointmentData SearchAppointmentByDate(string firstDate, string lastDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SearchAppointmentByDate", ReplyAction="http://tempuri.org/IAppointmentService/SearchAppointmentByDateResponse")]
        System.Threading.Tasks.Task<HCRS_Client.AppointmentServiceReference.AppointmentData> SearchAppointmentByDateAsync(string firstDate, string lastDate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAppointmentServiceChannel : HCRS_Client.AppointmentServiceReference.IAppointmentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AppointmentServiceClient : System.ServiceModel.ClientBase<HCRS_Client.AppointmentServiceReference.IAppointmentService>, HCRS_Client.AppointmentServiceReference.IAppointmentService {
        
        public AppointmentServiceClient() {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppointmentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Insert(HCRS_Client.AppointmentServiceReference.Appointment appointment) {
            return base.Channel.Insert(appointment);
        }
        
        public System.Threading.Tasks.Task<bool> InsertAsync(HCRS_Client.AppointmentServiceReference.Appointment appointment) {
            return base.Channel.InsertAsync(appointment);
        }
        
        public HCRS_Client.AppointmentServiceReference.Appointment_Patient[] GetAllPatients() {
            return base.Channel.GetAllPatients();
        }
        
        public System.Threading.Tasks.Task<HCRS_Client.AppointmentServiceReference.Appointment_Patient[]> GetAllPatientsAsync() {
            return base.Channel.GetAllPatientsAsync();
        }
        
        public HCRS_Client.AppointmentServiceReference.Appointment_Doctor[] GetAllDoctors() {
            return base.Channel.GetAllDoctors();
        }
        
        public System.Threading.Tasks.Task<HCRS_Client.AppointmentServiceReference.Appointment_Doctor[]> GetAllDoctorsAsync() {
            return base.Channel.GetAllDoctorsAsync();
        }
        
        public HCRS_Client.AppointmentServiceReference.AppointmentData GetAppointmentData() {
            return base.Channel.GetAppointmentData();
        }
        
        public System.Threading.Tasks.Task<HCRS_Client.AppointmentServiceReference.AppointmentData> GetAppointmentDataAsync() {
            return base.Channel.GetAppointmentDataAsync();
        }
        
        public HCRS_Client.AppointmentServiceReference.AppointmentInfo GetAppointmentById(int id) {
            return base.Channel.GetAppointmentById(id);
        }
        
        public System.Threading.Tasks.Task<HCRS_Client.AppointmentServiceReference.AppointmentInfo> GetAppointmentByIdAsync(int id) {
            return base.Channel.GetAppointmentByIdAsync(id);
        }
        
        public bool Update(int id, HCRS_Client.AppointmentServiceReference.Appointment appointment) {
            return base.Channel.Update(id, appointment);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(int id, HCRS_Client.AppointmentServiceReference.Appointment appointment) {
            return base.Channel.UpdateAsync(id, appointment);
        }
        
        public bool Delete(int id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public int GetAppointmentCount() {
            return base.Channel.GetAppointmentCount();
        }
        
        public System.Threading.Tasks.Task<int> GetAppointmentCountAsync() {
            return base.Channel.GetAppointmentCountAsync();
        }
        
        public HCRS_Client.AppointmentServiceReference.AppointmentData SearchAppointmentByPatientName(string patientName) {
            return base.Channel.SearchAppointmentByPatientName(patientName);
        }
        
        public System.Threading.Tasks.Task<HCRS_Client.AppointmentServiceReference.AppointmentData> SearchAppointmentByPatientNameAsync(string patientName) {
            return base.Channel.SearchAppointmentByPatientNameAsync(patientName);
        }
        
        public HCRS_Client.AppointmentServiceReference.AppointmentData SearchAppointmentByDoctorName(string doctorName) {
            return base.Channel.SearchAppointmentByDoctorName(doctorName);
        }
        
        public System.Threading.Tasks.Task<HCRS_Client.AppointmentServiceReference.AppointmentData> SearchAppointmentByDoctorNameAsync(string doctorName) {
            return base.Channel.SearchAppointmentByDoctorNameAsync(doctorName);
        }
        
        public HCRS_Client.AppointmentServiceReference.AppointmentData SearchAppointmentByDate(string firstDate, string lastDate) {
            return base.Channel.SearchAppointmentByDate(firstDate, lastDate);
        }
        
        public System.Threading.Tasks.Task<HCRS_Client.AppointmentServiceReference.AppointmentData> SearchAppointmentByDateAsync(string firstDate, string lastDate) {
            return base.Channel.SearchAppointmentByDateAsync(firstDate, lastDate);
        }
    }
}
